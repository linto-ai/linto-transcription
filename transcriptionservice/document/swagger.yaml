openapi: 3.0.3
info:
  title: Transcription service
  description: Transcription request interface
  version: 1.2.3

servers:
- url: /

security:
  - bearerAuth: []

paths:
  /list-services:
    get:
      tags:
      - Service Listing API
      summary: List Available sub-services
      responses:
        200:
          description: "List of available sub-services"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/subserviceList'
        500:
          description: "Server error"
          content:
            text/plain:
              schema:
                type: string
                default: "The server encountered an unexpected error."

  /transcribe:
    post:
      tags:
      - Speech-To-Text API
      summary: Perform Speech-to-Text
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: string
                  format: binary
                timestamps:
                  type: string
                  format: binary
                transcriptionConfig:
                  type: object
                  $ref: '#/components/schemas/transcriptionConfig'
                force_sync:
                  type: boolean
                  default: false
      responses:
        200:
          description: "Job successfully finished (force_sync)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transcriptionResult'
            text/plain:
              schema:
                type: string
                example: The transcription
            text/vtt:
              schema:
                type: string
                example: The transcription as VTT subtitles.
            text/srt:
              schema:
                type: string
                example: The transcription as SRT subtitles.
        201:
          description: Successfully created transcription job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobID'
        400:
          description: "Bad request"
          content:
            text/plain:
              schema:
                type: string
                default: "Bad header / Bad parameters / No file attached"
        500:
          description: "Server error"
          content:
            text/plain:
              schema:
                type: string
                default: "The server encountered an unexpected error."

  /transcribe-multi:
    post:
      tags:
      - Speech-To-Text API
      summary: Perform Speech-to-Text for multiple files
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                file:
                  type: array
                  items:
                    type: string
                    format: binary
                multiTranscriptionConfig:
                  type: object
                  $ref: '#/components/schemas/multiTranscriptionConfig'
      responses:
        200:
          description: "Job successfully finished (force_sync)"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transcriptionResult'
            text/plain:
              schema:
                type: string
                example: The transcription
            text/vtt:
              schema:
                type: string
                example: The transcription as VTT subtitles.
            text/srt:
              schema:
                type: string
                example: The transcription as SRT subtitles.
        201:
          description: Successfully created transcription job
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobID'
        400:
          description: "Bad request"
          content:
            text/plain:
              schema:
                type: string
                default: "Bad header / Bad parameters / No file attached"
        500:
          description: "Server error"
          content:
            text/plain:
              schema:
                type: string
                default: "The server encountered an unexpected error."
        
  /job/{jobid}:
    get:
      tags:
        - Job status
      parameters:
        - name: "jobid"
          in: path
          required: true
          description: Job request ID
          schema:
            type: string

      responses:
        201:
          description: "Job successfully finished. Returns a result ID"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobFinished'
        202:
          description: Task is pending or still processing. Returns job progress
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/jobInProgress'
        404:
          description: jobid hasn't been found
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/jobUnknown'
        500:
          description: Task has failed
          content: 
            application/json:
              schema: 
                $ref: '#/components/schemas/jobFailed'
  
  /results/{result_id}:
    get:
      tags:
        - Transcription result
      parameters:
        - name: result_id
          in: path
          required: true
          description: Result id
          schema:
            type: string
        - name: convert_numbers
          in: query
          required: false
          description: If true, numbers are replaced with digits.
          schema:
            type: boolean
            default: false
        - name: return_raw
          in: query
          required: false
          description: If true, return the raw text instead of the processed text.
          schema:
            type: boolean
            default: false
        - name: wordsub
          in: query
          required: false
          description: "Word substitution list originalWord:substituteWord"
          style: form
          schema:
            type: array
            items:
              type: string

      responses:
        200:
          description: Ressource available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/transcriptionResult'
            text/plain:
              schema:
                type: string
                example: The transcription
            text/vtt:
              schema:
                type: string
                example: The transcription as VTT subtitles.
            text/srt:
              schema:
                type: string
                example: The transcription as SRT subtitles.
        404:
          description: No ressource found for this id

  /job-log/{jobid}:
    get:
      tags:
      - Debug
      summary: Display task logs.
      parameters:
        - name: jobid
          in: path
          required: true
          description: Job ID
          schema:
            type: string
      responses:
        200:
          description: "Logs for the specified taskid"
          content:
            text/plain:
              schema:
                type: string
                default: "Task logs."
        404:
          description: "No logs found for specified taskid"
          content:
            text/plain:
              schema:
                type: string
                default: "No logs found for task X"
        500:
          description: "Server error"
          content:
            text/plain:
              schema:
                type: string
                default: "The server encountered an unexpected error."

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    transcriptionConfig:
      type: object
      properties:
        language:
          type: string
          default: null
        vadConfig:
          type: object
          $ref: '#/components/schemas/vadConfig'
        diarizationConfig:
          type: object
          $ref: '#/components/schemas/diarizationConfig'
        punctuationConfig:
          type: object
          $ref: '#/components/schemas/punctuationConfig'

    vadConfig:
      type: object
      properties:
        enableVad:
          type: boolean
          default: false
        methodName:
          type: string
          default: "WebRTC"
        minDuration:
          type: number
          default: 0
        maxDuration:
          type: number
          default: 1200


    diarizationConfig:
      type: object
      properties:
        enableDiarization:
          type: boolean
          default: false
        numberOfSpeaker:
          type: integer
          default: null
        maxNumberOfSpeaker:
          type: integer
          default: null
        serviceName:
          type: string
          default: null
    
    punctuationConfig:
      type: object
      properties:
        enablePunctuation:
          type: boolean
          default: false
        serviceName:
          type: string
          default: null

    subserviceList:
      type: object
      properties:
        serviceType:
          type: object
          default: "punctuation|diarization|..."
          properties:
            service_name: 
              type: string
            service_type:
              type: string
              default: "punctuation|diarization|..."
            service_langugage:
              type: string
              default: "fr-fr|en-us|*|?|..."
            queue_name:
              type: string
              default: "service_queue"
            description:
              type: string
              default: "Service short description"
            instances:
              type: array
              default: "Service short description"
              items:
                $ref: '#/components/schemas/service_instance'
      
    service_instance:
      type: object
      properties:
        host_name: 
          type: string
        last_alive:
          type: integer
          default: 1
        version:
          type: string
          default: "Service image versions"
        concurrency:
          type: integer
          default: 1
            
    
    jobID:
      type: object
      properties:
        jobid:
          type: string
    jobInProgress:
      type: object
      properties:
        state:
          type: string
          enum: [started, pending]
        steps:
          type: object
          properties:
            preprocessing:
              type: object
              properties:
                required:
                  type: boolean
                  enum: [true]
                state:
                  type: string
                  enum: ["pending", "done", "started"]
                  example: "done"
                progress:
                  type: number
                  default: 1.0
            diarization:
              type: object
              properties:
                required:
                  type: boolean
                  default: true
                state:
                  type: string
                  enum: ["pending", "done", "started"]
                  example: "started"
                progress:
                  type: number
                  example: 0.0
            transcription:
              type: object
              properties:
                required:
                  type: boolean
                  enum: [true]
                state:
                  type: string
                  enum: ["pending", "done", "started"]
                  example: "started"
                progress:
                  type: number
                  example: 0.250197289414994
            punctuation:
              type: object
              properties:
                required:
                  type: boolean
                  default: true
                state:
                  type: string
                  enum: ["pending", "done", "started"]
                  example: "pending"
                progress:
                  type: number
                  example: 0.0
            postprocessing:
              type: object
              properties:
                required:
                  type: boolean
                  enum: [true]
                state:
                  type: string
                  enum: ["pending", "done", "started"]
                  example: "pending"
                progress:
                  type: number
                  default: 0.0
    jobFinished:
      type: object
      properties:
        state:
          type: string
          enum: ["done"]
        result_id:
          type: string
          default: "552d2b53-e0cb-41c6-b5ed-a75a7fbde757 (hash to be used on the /results/{hash} route)"
    jobUnknown:
      type: object
      properties:
        state:
          type: string
          default: "failed"
        reason:
          type: string
          default: "Unknown jobid XXX"
    jobFailed:
      type: object
      properties:
        state:
          type: string
          default: "failed"
        reason:
          type: string
          default: "An error message"
    transcriptionResult:
      type: object
      properties:
        transcription_result:
          type: string
        confidence:
          type: number
        raw_transcription:
          type: string
        segments:
          type: array
          items:
            $ref: '#/components/schemas/speechSegment'
    speechSegment:
      type: object
      properties:
        spk_id: 
          type: string
        start: 
          type: number
        end: 
          type: number
        duration: 
          type: number
        segment: 
          type: string
        raw_segment:
          type: string
        words:
          type: array
          items:
            $ref: '#/components/schemas/word'
    word:
      type: object
      properties:
        start:
          type: number
        end:
          type: number
        word:
          type: string
        confidence:
          type: number


